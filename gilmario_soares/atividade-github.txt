enviando minha 1º atividade 1
Gilmario Soares

Respostas das Questões:

Questão 1

O que é git?

Git é um sistema de controle de versão de arquivos. Através deles podemos desenvolver projetos na qual diversas pessoas podem contribuir simultaneamente no mesmo, editando e criando novos arquivos e permitindo que os mesmos possam existir sem o risco de suas alterações serem sobrescritas.

Se não houver um sistema de versão, imagine o caos entre duas pessoas abrindo o mesmo arquivo ao mesmo tempo. Uma das aplicações do git é justamente essa, permitir que um arquivo possa ser editado ao mesmo tempo por pessoas diferentes. Por mais complexo que isso seja, ele tenta manter tudo em ordem para evitar problemas para nós desenvolvedores.

Outro fator importante do git (e essa é um dos seus diferenciais em relação ao svn – caso vc o conheça) é a possibilidade de criar, a qualquer momento, vários snapshots do seu projeto, ou como chamamos mais “nerdmenete”, branch. Suponha que o seu projeto seja um site html, e você deseja criar uma nova seção no seu código HTML, mas naquele momento você não deseja que estas alterações estejam disponíveis para mais ninguém, só para você. Isso é, você quer alterar o projeto (incluindo vários arquivos nele), mas ainda não quer que isso seja tratado como “oficial” para outras pessoas, então vc cria um branch (como se fosse uma cópia espelho) e então trabalha apenas nesse branch, até acertar todos os detalhes dele. Após isso, você pode fazer um merge de volta do seu branch até o projeto original. Veja bem, se tudo isso que você leu só ajudou a te confundir mais – respire fundo – e siga em frente. Com exemplos tudo fica melhor.


Como você definiria o github?

O Github é um serviço web que oferece diversas funcionalidades extras aplicadas ao git. Resumindo, você poderá usar gratuitamente o github para hospedar seus projetos pessoais. Além disso, quase todos os projetos/frameworks/bibliotecas sobre desenvolvimento open source estão no github, e você pode acompanhá-los através de novas versões, contribuir informando bugs ou até mesmo enviando código e correções. Se você é desenvolvedor e ainda não tem github, você está atrasado e essa é a hora de correr atrás do prejuízo.

Questão 2

​O que você pôde notar de diferente? Comente

É um programa que didferente dos demais não exige que você tenha a preucupação de estar protegendo ou atualizando para que seus dados não sejam perdidos. Suas informações suas atividades vão estar guardados o tempo que for necessário. Você não precisa se preucupar para ler ou visualizar com urgencia para desocupar espaço. Porque eles vão estar guardados  o tempo todo.

Questão 3

Defina branch no ambito do github.

 que é um Branch

Para compreender realmente a forma como o Git cria branches, precisamos dar um passo atrás e examinar como o Git armazena seus dados. Como você pode se lembrar do capítulo 1, o Git não armazena dados como uma série de mudanças ou deltas, mas sim como uma série de snapshots.

Quando você faz um commit no Git, o Git guarda um objeto commit que contém um ponteiro para o snapshot do conteúdo que você colocou na área de seleção, o autor e os metadados da mensagem, zero ou mais ponteiros para o commit ou commits que são pais deste commit: nenhum pai para o commit inicial, um pai para um commit normal e múltiplos pais para commits que resultem de um merge de dois ou mais branches.

Para visualizar isso, vamos supor que você tenha um diretório contendo três arquivos, e colocou todos eles na área de seleção e fez o commit. Colocar na área de seleção cria o checksum de cada arquivo (o hash SHA-1 que nos referimos no capítulo 1), armazena esta versão do arquivo no repositório Git (o Git se refere a eles como blobs), e acrescenta este checksum à área de seleção (staging area):

$ git add README test.rb LICENSE
$ git commit -m 'commit inicial do meu projeto'

Quando você cria um commit executando git commit, o Git calcula o checksum de cada subdiretório (neste caso, apenas o diretório raiz do projeto) e armazena os objetos de árvore no repositório Git. O Git em seguida, cria um objeto commit que tem os metadados e um ponteiro para a árvore do projeto raiz, então ele pode recriar este snapshot quando necessário.

Seu repositório Git agora contém cinco objetos: um blob para o conteúdo de cada um dos três arquivos, uma árvore que lista o conteúdo do diretório e especifica quais nomes de arquivos são armazenados em quais blobs, e um commit com o ponteiro para a raiz dessa árvore com todos os metadados do commit.

Porque você utiliza o branch?

O que ocorre é que às vezes temos que fazer modificações grandes, mas os clientes ou nossos sites, muitas vezes não podem esperar a gente terminar para corrigir um bug, por exemplo. Agora, uma coisa legal a fazer é usar o git e o git-svn, já que usamos o SVN e não o CVS. Isso porque podemos fazer todas as alterações na nossa máquina, versionando aos poucos, e commitar no SVN apenas quando estiver tudo pronto. Isso diminui os problemas de merge que sempre ocorrem. Mas isso, dependendo do número de pessoas no projeto e estabilidade do núcleo do mesmo, só funciona para 1 ou 2 dias. Depois, fica tão chato quanto o merge.

Agora, vou falar algo que corro o risco de levar pedra, mas é isso aí. Das últimas vezes que fizemos um upgrade de versão, criamos a nova versão no trunk. E abrimos um branch para a versão atual, que por já estar estável, sofre menos alterações. Fizemos isso porque o merge é sempre a coisa mais chata do mundo de ser feito. Não é muito "ortodoxo", mas tem seus benefícios. O principal é que os desenvolvedores sempre sabem que a evolução está no trunk.

Para quem você enviou o arquivo branch?

Enviei para o meu Professor de Redes (Ramon)

Questão 4

Que tipo de informação o git apresente de forma que te permita saber que há diferença entre os branch?

A tag é apenas uma marca, em geral, em um branch específico que marca uma situação em um determinado momento.

O branch tradicional deve ser algo experimental, algo em paralelo, algo que potencialmente será incorporado ao desenvolvimento principal, ao branch principal.

A tag costuma marcar um release, uma versão ou algo assim. Então a tag é apenas um apontador para um commit específico enquanto que um branch é um caminho, um galho de desenvolvimento.

A tag é apenas um nome que se dá para um estado do desenvolvimento. Desta forma fica fácil acessar aquele estado sempre que for preciso.

No Git não há custo em ter uma tag, é algo simbólico e não ocupa espaço no repositório. Você não altera o que está na tag. É um ramo estático que pode ser usado a qualquer momento. A tag será usada eventualmente, quando há algum evento importante no desenvolvimento e que ali precise desta marca para voltar nela outras vezes. Normalmente este evento é um release.

Se trabalha no desenvolvimento sempre em cima de branches através dos commits. É nele que se faz o merge do estado anterior com o que foi desenvolvido agora. O branch vai recebendo evoluções do desenvolvimento. É incentivado que se faça um novo branch, sempre que possível, quando vai iniciar uma nova linha de desenvolvimento.

 



